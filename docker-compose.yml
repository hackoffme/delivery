version: '3.9'
services:
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    container_name: ${COMPOSE_PROJECT_NAME}_certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - certbot_lib:/var/lib/letsencrypt
    depends_on:
      - nginx
    environment:
      - DOMAIN=$DOMAIN
      - EMAIL=$EMAIL
  
  nginx:
    restart: always
    build: 
      context: ./nginx
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    ports:
      # - $PORT:$PORT
      - $PORT_SSL:$PORT_SSL
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - django_static:/var/www/static
      - django_media:/var/www/media
    depends_on:
      django:
        condition: service_healthy
    environment:
      - DOMAIN=$DOMAIN
      # - PORT=$PORT
      - PORT_SSL=$PORT_SSL
      - COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME
  
  bot:
    restart: always
    build: 
      context: ./delivery_bot
    container_name: ${COMPOSE_PROJECT_NAME}_bot
    depends_on:
      django:
        condition: service_healthy
    environment:
      - APP_BASE_URL=$APP_BASE_URL
      - TOKEN=$TOKEN
      - API_URL=$API_URL
      - API_USER=$API_USER
      - API_PASSWORD=$API_PASSWORD
      - TZ=$TZ
      - TIME_START=$TIME_START
      - TIME_END=$TIME_END
      - REDIS_BOT=$REDIS_BOT

  django:
    restart: always
    build:
      context: ./delivery
    entrypoint: ["wait-for-postgres.sh", "${COMPOSE_PROJECT_NAME}_postgre"]
    container_name: ${COMPOSE_PROJECT_NAME}_django
    volumes:
      - django_static:/var/www/static
      - django_media:/var/www/media
    depends_on:
      - postgre
    healthcheck:
      test: curl http://${COMPOSE_PROJECT_NAME}_django:8000 || exit 1
      interval: 5s
      timeout: 5s
      # retries: 5
      start_period: 15s
    environment:
      - DOMAIN=$DOMAIN
      - PORT_SSL=$PORT_SSL
      - SECRET_KEY=$SECRET_KEY
      - PG_HOST=$PG_HOST
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - TOKEN_ADMIN_GROUP=$TOKEN_ADMIN_GROUP
      - CHANEL=$CHANEL
      - REDIS_CACHE=$REDIS_CACHE
  
  postgre:
    restart: always
    image: postgres
    container_name: ${COMPOSE_PROJECT_NAME}_postgre
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD

  redis:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    volumes:
      - redis_data:/data

volumes:
  certbot_conf:
  certbot_www:
  certbot_lib:
  db:
  django_static:
  django_media:
  redis_data:
  